# This is where I check what 3 + 3 is
3 + 3
help(Nile)
mean(Nile)
mean(Nile)
plot(Nile)
hist(Nile)
x <- "Hello world"
asds <- 2023
data_chick <- as.matrix(ChickWeight)
# Create 7 random numbers between 0 and 1
runif(7)
# R allows for two different versions to assign a value to a name
z <- 2 + 2 #better way
z = 2 + 2
# "c" stands for concatenate so "y" here stores the values 1, 2 and 4.
y <- c(1, 2, 4)
#Parts of individual objects can be accessed via square brackets
y[3]
# We can access multiple parts of objects with a colon
y[2:3]
data_chick[1]
data_chick[1,]
y<- runif(10)
# We can access multiple parts of objects with a colon
y[2:3]
data_chick[1,]
# Suppose now we want the sum of y
sum(y)
# Store the output of a function in another object
z <- sum(y)
# Can you now assign to a new object?
a <- sqrt (962)
rm(list = ls())
x <- "Hello"
class(x)
class (5)
length(x)
x[2] <- "world"
# Extract the element named gamma from the vector below.
vec2 <- c(alpha = 1, beta = 2, gamma = 3)
vec2 ["gama"]
vec2 ["gamma"]
x <- rnorm(n = 50)
length(x)
mean(x)
sd(x)
help(rnorm)
rnorm(100, mean=100, sd=15)
data <- rnorm(100, mean= 100, sd=15)
length(data)
hist(data)
?set.seed
y <- x
y <- 2*y
y <- 2*y
y
xylm <- lm(y~x)
xylm
summary(xylm)
attributes(xylm)
xylm$coefficients
summary(ChickWeight)
plot(x,y)
xylm$residuals
plot(xylm$residuals)
##Start setting the working directory
setwd("C:\Users\User\Documents\GitHub\StatsI_Fall2023")
##Start setting the working directory
setwd("C:\Users\User\Documents\GitHub\StatsI_Fall2023")
##Start setting the working directory
setwd("C:\Users\User\Documents\GitHub\StatsI_Fall2023\problemSets\PS02_my_answers")
##Start setting the working directory
setwd("C:/Users/olivi/Documents/GitHub")
##Start setting the working directory.
setwd("C:/Users/olivi/Documents/GitHub")
Upper class         14              6              7
# Create a data frame with your data
data <- data.frame(
Class = c("Upper class", "Lower class"),
`Not Stopped` = c(14, 7),
`Bribe requested` = c(6, 7),
`Stopped/given warning` = c(7, 1)
)
# Perform the Chi-squared test
result <- chisq.test(data[, -1])
# Create a data frame with your data
data <- data.frame(
Class = c("Upper class", "Lower class"),
`Not Stopped` = c(14, 7),
`Bribe requested` = c(6, 7),
`Stopped/given warning` = c(7, 1)
)
# Perform the Chi-squared test
result <- chisq.test(data[, -1])
# Print the Chi-squared statistic only
cat("Chi-squared statistic:", result$statistic, "\n")
result <- fisher.test(data[, -1])
cat("Fisher's exact test p-value:", result$p.value, "\n")
# Create a data frame with your data
data <- data.frame(
Class = c("Upper class", "Lower class"),
`Not Stopped` = c(14, 7),
`Bribe requested` = c(6, 7),
`Stopped/given warning` = c(7, 1)
)
# Perform the Chi-squared test
result <- chisq.test(data[, -1])
# Print the Chi-squared statistic only
cat("Chi-squared statistic:", result$statistic, "\n")
# We will create a data frame with our data
data <- data.frame(
Class = c("Upper class", "Lower class"),
`Not Stopped` = c(14, 7),
`Bribe requested` = c(6, 7),
`Stopped/given warning` = c(7, 1)
)
# Now, we will perform the Chi-squared test
result <- chisq.test(data[, -1])
# We can now print the Chi-squared statistic only
cat("Chi-squared statistic:", result$statistic, "\n")
# Create a data frame with your data
data <- data.frame(
Class = c("Upper class", "Lower class"),
`Not Stopped` = c(14, 7),
`Bribe requested` = c(6, 7),
`Stopped/given warning` = c(7, 1)
)
row_totals <- rowSums(data[, -1])
col_totals <- colSums(data[, -1])
grand_total <- sum(row_totals)
expected_values <- outer(row_totals, col_totals) / grand_total
chi_squared <- sum((data[, -1] - expected_values)^2 / expected_values)
df <- (nrow(data) - 1) * (ncol(data) - 1)
cat("Chi-squared statistic:", chi_squared, "\n")
install.packages("rvest")
install.packages("tidyverse")
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# read in data
inc.sub <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/incumbents_subset.csv")
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install.packages("knitr")
library(knitr)
# read in data
inc.sub <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/incumbents_subset.csv")
##Start setting the working directory
setwd("C:/Users/User/Documents/GitHub/StatsI_Fall2023/problemSets/PS03/template")
getwd()
##Research questions
##1. how the difference in campaign spending between incumbentand challenger affects the incumbent's vote share?
##This analyse will be about a dataset called incumbents subset.csv
inc.sub <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2023/main/datasets/incumbents_subset.csv")
##Check out the head and tail.
head(inc.sub)
tail(inc.sub)
##We will select only the columns "voteshare" and "difflog" to create a dataframe with the relevant variables
selected_data  <- inc.sub[, c("voteshare", "difflog")]
# Simple linear regression
model <- lm(voteshare ~ difflog, data = selected_data)
## Summary of the regression model
summary(model)
summary_inc.sub <- summary(inc.sub)
write.table(summary_inc.sub, file = "summary_inc.sub.txt")
## Make a scatterplot of the two variables and add the regression line.
plot(inc.sub$difflog, inc.sub$voteshare)
abline(model, col = "red")
## Save the residuals of the model in a separate object.
residuals <- resid(model)
## Summary of the regression model
summary(model)
## Residuals
head(residuals)
#2  We will select only the variables "presvote" and "difflog"
selected_data <- inc.sub [, c("presvote", "difflog")]
## Linear regression model
model_presvote <- lm(presvote ~ difflog, data = inc.sub)
## Summary
summary(model_presvote)
##  Make a scatterplot of the two variables and add the regression line.
plot(inc.sub$difflog, inc.sub$presvote)
# Regression
abline(model_presvote, col = "red")
## Save the residuals of the model in a separate object.
# Residuals
residuals_presvote <- resid(model_presvote)
# Summary of the regression model
summary(model_presvote)
# Residuals
head(residuals_presvote)
# 3 We will select the columns 'voteshare' and 'presvote'
selected_data <- inc.sub[, c("voteshare", "presvote")]
# Linear regression model
model_voteshare <- lm(voteshare ~ presvote, data = selected_data)
# Summary of the regression model
summary(model_voteshare)
# Scatterplot
plot(selected_data$presvote, selected_data$voteshare)
# Regression
abline(model_voteshare, col = "red")
# 4 The residuals from Question 1 are stored in residuals and residuals from Question 2 are stored in residuals_presvote
residuals_model <- lm(residuals ~ residuals_presvote)
# Summary of the regression model
summary(residuals_model)
# Scatterplot with regression line
plot(residuals_presvote, residuals)
abline(residuals_model, col = "red")
#5 We will select the columns 'voteshare', 'difflog', and 'presvote'
selected_data <- inc.sub[, c("voteshare", "difflog", "presvote")]
# Linear regression model
model_combined <- lm(voteshare ~ difflog + presvote, data = selected_data)
# Summary of the regression model
summary(model_combined)
install.packages("knitr")
source("~/GitHub/StatsI_Fall2023/problemSets/PS03/my_answers/PS3_OliviaFreitas.R")
install.packages("knitr")
